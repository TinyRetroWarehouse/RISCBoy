/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

// Block name           : gpio
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

module gpio_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	output reg [15:0] out_o,
	output reg [15:0] dir_o,
	input wire [15:0] in_i,
	output reg  fsel0_p0_o,
	output reg  fsel0_p1_o,
	output reg  fsel0_p2_o,
	output reg  fsel0_p3_o,
	output reg  fsel0_p4_o,
	output reg  fsel0_p5_o,
	output reg  fsel0_p6_o,
	output reg  fsel0_p7_o,
	output reg  fsel0_p8_o,
	output reg  fsel0_p9_o,
	output reg  fsel0_p10_o,
	output reg  fsel0_p11_o,
	output reg  fsel0_p12_o,
	output reg  fsel0_p13_o,
	output reg  fsel0_p14_o,
	output reg  fsel0_p15_o
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'hf;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_OUT = 0;
localparam ADDR_DIR = 4;
localparam ADDR_IN = 8;
localparam ADDR_FSEL0 = 12;

wire __out_wen = wen && addr == ADDR_OUT;
wire __out_ren = ren && addr == ADDR_OUT;
wire __dir_wen = wen && addr == ADDR_DIR;
wire __dir_ren = ren && addr == ADDR_DIR;
wire __in_wen = wen && addr == ADDR_IN;
wire __in_ren = ren && addr == ADDR_IN;
wire __fsel0_wen = wen && addr == ADDR_FSEL0;
wire __fsel0_ren = ren && addr == ADDR_FSEL0;

wire [15:0] out_wdata = wdata[15:0];
wire [15:0] out_rdata;
wire [31:0] __out_rdata = {16'h0, out_rdata};
assign out_rdata = out_o;

wire [15:0] dir_wdata = wdata[15:0];
wire [15:0] dir_rdata;
wire [31:0] __dir_rdata = {16'h0, dir_rdata};
assign dir_rdata = dir_o;

wire [15:0] in_wdata = wdata[15:0];
wire [15:0] in_rdata;
wire [31:0] __in_rdata = {16'h0, in_rdata};
assign in_rdata = in_i;

wire  fsel0_p0_wdata = wdata[0];
wire  fsel0_p0_rdata;
wire  fsel0_p1_wdata = wdata[1];
wire  fsel0_p1_rdata;
wire  fsel0_p2_wdata = wdata[2];
wire  fsel0_p2_rdata;
wire  fsel0_p3_wdata = wdata[3];
wire  fsel0_p3_rdata;
wire  fsel0_p4_wdata = wdata[4];
wire  fsel0_p4_rdata;
wire  fsel0_p5_wdata = wdata[5];
wire  fsel0_p5_rdata;
wire  fsel0_p6_wdata = wdata[6];
wire  fsel0_p6_rdata;
wire  fsel0_p7_wdata = wdata[7];
wire  fsel0_p7_rdata;
wire  fsel0_p8_wdata = wdata[8];
wire  fsel0_p8_rdata;
wire  fsel0_p9_wdata = wdata[9];
wire  fsel0_p9_rdata;
wire  fsel0_p10_wdata = wdata[10];
wire  fsel0_p10_rdata;
wire  fsel0_p11_wdata = wdata[11];
wire  fsel0_p11_rdata;
wire  fsel0_p12_wdata = wdata[12];
wire  fsel0_p12_rdata;
wire  fsel0_p13_wdata = wdata[13];
wire  fsel0_p13_rdata;
wire  fsel0_p14_wdata = wdata[14];
wire  fsel0_p14_rdata;
wire  fsel0_p15_wdata = wdata[15];
wire  fsel0_p15_rdata;
wire [31:0] __fsel0_rdata = {16'h0, fsel0_p15_rdata, fsel0_p14_rdata, fsel0_p13_rdata, fsel0_p12_rdata, fsel0_p11_rdata, fsel0_p10_rdata, fsel0_p9_rdata, fsel0_p8_rdata, fsel0_p7_rdata, fsel0_p6_rdata, fsel0_p5_rdata, fsel0_p4_rdata, fsel0_p3_rdata, fsel0_p2_rdata, fsel0_p1_rdata, fsel0_p0_rdata};
assign fsel0_p0_rdata = fsel0_p0_o;
assign fsel0_p1_rdata = fsel0_p1_o;
assign fsel0_p2_rdata = fsel0_p2_o;
assign fsel0_p3_rdata = fsel0_p3_o;
assign fsel0_p4_rdata = fsel0_p4_o;
assign fsel0_p5_rdata = fsel0_p5_o;
assign fsel0_p6_rdata = fsel0_p6_o;
assign fsel0_p7_rdata = fsel0_p7_o;
assign fsel0_p8_rdata = fsel0_p8_o;
assign fsel0_p9_rdata = fsel0_p9_o;
assign fsel0_p10_rdata = fsel0_p10_o;
assign fsel0_p11_rdata = fsel0_p11_o;
assign fsel0_p12_rdata = fsel0_p12_o;
assign fsel0_p13_rdata = fsel0_p13_o;
assign fsel0_p14_rdata = fsel0_p14_o;
assign fsel0_p15_rdata = fsel0_p15_o;

always @ (*) begin
	case (addr)
		ADDR_OUT: rdata = __out_rdata;
		ADDR_DIR: rdata = __dir_rdata;
		ADDR_IN: rdata = __in_rdata;
		ADDR_FSEL0: rdata = __fsel0_rdata;
		default: rdata = 32'h0;
	endcase
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		out_o <= 16'h0;
		dir_o <= 16'h0;
		fsel0_p0_o <= 1'h0;
		fsel0_p1_o <= 1'h0;
		fsel0_p2_o <= 1'h0;
		fsel0_p3_o <= 1'h0;
		fsel0_p4_o <= 1'h0;
		fsel0_p5_o <= 1'h0;
		fsel0_p6_o <= 1'h0;
		fsel0_p7_o <= 1'h0;
		fsel0_p8_o <= 1'h0;
		fsel0_p9_o <= 1'h0;
		fsel0_p10_o <= 1'h0;
		fsel0_p11_o <= 1'h0;
		fsel0_p12_o <= 1'h0;
		fsel0_p13_o <= 1'h0;
		fsel0_p14_o <= 1'h0;
		fsel0_p15_o <= 1'h0;
	end else begin
		if (__out_wen)
			out_o <= out_wdata;
		if (__dir_wen)
			dir_o <= dir_wdata;
		if (__fsel0_wen)
			fsel0_p0_o <= fsel0_p0_wdata;
		if (__fsel0_wen)
			fsel0_p1_o <= fsel0_p1_wdata;
		if (__fsel0_wen)
			fsel0_p2_o <= fsel0_p2_wdata;
		if (__fsel0_wen)
			fsel0_p3_o <= fsel0_p3_wdata;
		if (__fsel0_wen)
			fsel0_p4_o <= fsel0_p4_wdata;
		if (__fsel0_wen)
			fsel0_p5_o <= fsel0_p5_wdata;
		if (__fsel0_wen)
			fsel0_p6_o <= fsel0_p6_wdata;
		if (__fsel0_wen)
			fsel0_p7_o <= fsel0_p7_wdata;
		if (__fsel0_wen)
			fsel0_p8_o <= fsel0_p8_wdata;
		if (__fsel0_wen)
			fsel0_p9_o <= fsel0_p9_wdata;
		if (__fsel0_wen)
			fsel0_p10_o <= fsel0_p10_wdata;
		if (__fsel0_wen)
			fsel0_p11_o <= fsel0_p11_wdata;
		if (__fsel0_wen)
			fsel0_p12_o <= fsel0_p12_wdata;
		if (__fsel0_wen)
			fsel0_p13_o <= fsel0_p13_wdata;
		if (__fsel0_wen)
			fsel0_p14_o <= fsel0_p14_wdata;
		if (__fsel0_wen)
			fsel0_p15_o <= fsel0_p15_wdata;
	end
end

endmodule

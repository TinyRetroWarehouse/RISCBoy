name: gpio
bus: apb
addr: 16
data: 32
params:
  N_PADS: 16
  W_FSEL: 1
regs:
  - name: out
    info: Processor GPIO pin write register (FSEL 0)
    bits:
      - {b: [N_PADS - 1, 0], access: rw}
  - name: dir
    info: Processor GPIO output enables (FSEL 0)
    bits:
      - {b: [N_PADS - 1, 0], access: rw}
  - name: in
    info: Processor GPIO pin read values (FSEL 0)
    bits:
      - {b: [N_PADS - 1, 0], access: rov}
  # Flow FSEL fields across as many registers as needed:
  - generate: |
      remaining_bits = 0
      regnum = 0
      for i in range(N_PADS):
          if remaining_bits < W_FSEL:
              _("- name: fsel{}".format(regnum))
              _("  info: Function select register {}".format(regnum))
              _("  bits:")
              remaining_bits = W_DATA
              regnum = regnum + 1
          lsb = W_DATA - remaining_bits
          remaining_bits -= W_FSEL
          _("    - {{b: [{}, {}], name: p{}, access: rw}}".format(lsb + W_FSEL - 1, lsb, i))


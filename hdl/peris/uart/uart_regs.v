// Autogenerated with regblock
// Do not edit manually

module uart_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	output reg  csr_en_o,
	input wire  csr_busy_i,
	output reg  csr_txie_o,
	output reg  csr_rxie_o,
	output reg [23:0] div_int_o,
	output reg [7:0] div_frac_o,
	input wire [7:0] tfstat_level_i,
	input wire  tfstat_full_i,
	input wire  tfstat_empty_i,
	input wire [7:0] rfstat_level_i,
	input wire  rfstat_full_i,
	input wire  rfstat_empty_i,
	output reg [7:0] tx__o,
	output reg tx__wen,
	input wire [7:0] rx__i,
	output reg rx__ren
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'h1f;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_CSR = 0;
localparam ADDR_DIV = 4;
localparam ADDR_TFSTAT = 8;
localparam ADDR_RFSTAT = 12;
localparam ADDR_TX = 16;
localparam ADDR_RX = 20;
wire csr_wen = wen && addr == ADDR_CSR;
wire csr_ren = ren && addr == ADDR_CSR;
wire div_wen = wen && addr == ADDR_DIV;
wire div_ren = ren && addr == ADDR_DIV;
wire tfstat_wen = wen && addr == ADDR_TFSTAT;
wire tfstat_ren = ren && addr == ADDR_TFSTAT;
wire rfstat_wen = wen && addr == ADDR_RFSTAT;
wire rfstat_ren = ren && addr == ADDR_RFSTAT;
wire tx_wen = wen && addr == ADDR_TX;
wire tx_ren = ren && addr == ADDR_TX;
wire rx_wen = wen && addr == ADDR_RX;
wire rx_ren = ren && addr == ADDR_RX;

wire  csr_en_rdata;
wire  csr_en_wdata;
assign csr_en_rdata = csr_en_o;
wire  csr_busy_rdata;
wire  csr_busy_wdata;
assign csr_busy_rdata = csr_busy_i;
wire  csr_txie_rdata;
wire  csr_txie_wdata;
assign csr_txie_rdata = csr_txie_o;
wire  csr_rxie_rdata;
wire  csr_rxie_wdata;
assign csr_rxie_rdata = csr_rxie_o;
wire [31:0] csr_rdata = {28'h0, csr_rxie_rdata, csr_txie_rdata, csr_busy_rdata, csr_en_rdata};
assign csr_en_wdata = wdata[0:0];
assign csr_busy_wdata = wdata[1:1];
assign csr_txie_wdata = wdata[2:2];
assign csr_rxie_wdata = wdata[3:3];

wire [23:0] div_int_rdata;
wire [23:0] div_int_wdata;
assign div_int_rdata = div_int_o;
wire [7:0] div_frac_rdata;
wire [7:0] div_frac_wdata;
assign div_frac_rdata = div_frac_o;
wire [31:0] div_rdata = {div_int_rdata, div_frac_rdata};
assign div_int_wdata = wdata[31:8];
assign div_frac_wdata = wdata[7:0];

wire [7:0] tfstat_level_rdata;
wire [7:0] tfstat_level_wdata;
assign tfstat_level_rdata = tfstat_level_i;
wire  tfstat_full_rdata;
wire  tfstat_full_wdata;
assign tfstat_full_rdata = tfstat_full_i;
wire  tfstat_empty_rdata;
wire  tfstat_empty_wdata;
assign tfstat_empty_rdata = tfstat_empty_i;
wire [31:0] tfstat_rdata = {tfstat_full_rdata, tfstat_empty_rdata, 22'h0, tfstat_level_rdata};
assign tfstat_level_wdata = wdata[7:0];
assign tfstat_full_wdata = wdata[31:31];
assign tfstat_empty_wdata = wdata[30:30];

wire [7:0] rfstat_level_rdata;
wire [7:0] rfstat_level_wdata;
assign rfstat_level_rdata = rfstat_level_i;
wire  rfstat_full_rdata;
wire  rfstat_full_wdata;
assign rfstat_full_rdata = rfstat_full_i;
wire  rfstat_empty_rdata;
wire  rfstat_empty_wdata;
assign rfstat_empty_rdata = rfstat_empty_i;
wire [31:0] rfstat_rdata = {rfstat_full_rdata, rfstat_empty_rdata, 22'h0, rfstat_level_rdata};
assign rfstat_level_wdata = wdata[7:0];
assign rfstat_full_wdata = wdata[31:31];
assign rfstat_empty_wdata = wdata[30:30];

wire [7:0] tx__rdata;
wire [7:0] tx__wdata;
assign tx__rdata = 8'h0;
wire [31:0] tx_rdata = {24'h0, tx__rdata};
assign tx__wdata = wdata[7:0];

wire [7:0] rx__rdata;
wire [7:0] rx__wdata;
assign rx__rdata = rx__i;
wire [31:0] rx_rdata = {24'h0, rx__rdata};
assign rx__wdata = wdata[7:0];

always @ (*) begin
	case (addr)
		ADDR_CSR: rdata = csr_rdata;
		ADDR_DIV: rdata = div_rdata;
		ADDR_TFSTAT: rdata = tfstat_rdata;
		ADDR_RFSTAT: rdata = rfstat_rdata;
		ADDR_TX: rdata = tx_rdata;
		ADDR_RX: rdata = rx_rdata;
		default: rdata = 32'h0;
	endcase
	tx__wen = tx_wen;
	tx__o = tx__wdata;
	rx__ren = rx_ren;
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		csr_en_o <= 1'h0;
		csr_txie_o <= 1'h0;
		csr_rxie_o <= 1'h0;
		div_int_o <= 24'h0;
		div_frac_o <= 8'h0;
	end else begin
		if (csr_wen)
			csr_en_o <= csr_en_wdata;
		if (csr_wen)
			csr_txie_o <= csr_txie_wdata;
		if (csr_wen)
			csr_rxie_o <= csr_rxie_wdata;
		if (div_wen)
			div_int_o <= div_int_wdata;
		if (div_wen)
			div_frac_o <= div_frac_wdata;
	end
end

endmodule


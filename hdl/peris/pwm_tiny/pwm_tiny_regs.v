/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

// Block name           : pwm_tiny
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

module pwm_tiny_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	output reg [7:0] ctrl_val_o,
	output reg [7:0] ctrl_div_o,
	output reg  ctrl_en_o,
	output reg  ctrl_inv_o
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'h3;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_CTRL = 0;

wire __ctrl_wen = wen && addr == ADDR_CTRL;
wire __ctrl_ren = ren && addr == ADDR_CTRL;

wire [7:0] ctrl_val_wdata = wdata[7:0];
wire [7:0] ctrl_val_rdata;
wire [7:0] ctrl_div_wdata = wdata[15:8];
wire [7:0] ctrl_div_rdata;
wire  ctrl_en_wdata = wdata[31];
wire  ctrl_en_rdata;
wire  ctrl_inv_wdata = wdata[30];
wire  ctrl_inv_rdata;
wire [31:0] __ctrl_rdata = {ctrl_en_rdata, ctrl_inv_rdata, 14'h0, ctrl_div_rdata, ctrl_val_rdata};
assign ctrl_val_rdata = ctrl_val_o;
assign ctrl_div_rdata = ctrl_div_o;
assign ctrl_en_rdata = ctrl_en_o;
assign ctrl_inv_rdata = ctrl_inv_o;

always @ (*) begin
	case (addr)
		ADDR_CTRL: rdata = __ctrl_rdata;
		default: rdata = 32'h0;
	endcase
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		ctrl_val_o <= 8'h0;
		ctrl_div_o <= 8'h1;
		ctrl_en_o <= 1'h0;
		ctrl_inv_o <= 1'h0;
	end else begin
		if (__ctrl_wen)
			ctrl_val_o <= ctrl_val_wdata;
		if (__ctrl_wen)
			ctrl_div_o <= ctrl_div_wdata;
		if (__ctrl_wen)
			ctrl_en_o <= ctrl_en_wdata;
		if (__ctrl_wen)
			ctrl_inv_o <= ctrl_inv_wdata;
	end
end

endmodule

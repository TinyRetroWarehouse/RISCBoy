name: ppu
bus: apb
addr: 16
data: 32
params:
  W_COORD: 10
  N_BACKGROUND: 2
  N_SPRITE: 8
regs:
  - name: csr
    info: PPU control and status register
    bits:
      - {b: 0, name: run, access: sc, info: "Write 1 to start the PPU running. Self-clearing strobe"}
      - {b: 1, name: halt, access: sc, info: "Write 1 to manually halt the PPU. Self-clearing strobe"}
      - {b: 2, name: running, access: rov, info: "Reads as 1 if PPU is running, otherwise 0"}
      - {b: 3, name: halt_hsync, access: rw, info: "If 1, the PPU will halt automatically after completing a scanline"}
      - {b: 4, name: halt_vsync, access: rw, info: "If 1, the PPU will halt automatically after completing a frame"}
  - name: dispsize
    info: Configure display dimensions. Actual width is W + 1, height is H + 1
    bits:
      - {b: [W_COORD - 1, 0],  name: w, access: rw}
      - {b: [16 + W_COORD - 1, 16], name: h, access: rw}
  - name: default_bg_colour
    info: Colour displayed when all blended pixels are transparent, or all sprites/backgrounds are disabled.
    bits:
      - {b: [14, 0], access: rw}
  - name: beam
    info: Scan coordinates of the next pixel to be blended (read-only)
    bits:
      - {b: [W_COORD - 1, 0],  name: x, access: rov}
      - {b: [16 + W_COORD - 1, 16], name: y, access: rov}
  - generate: |
      for bg in range(N_BACKGROUND):
        _('- name: bg{}_csr'.format(bg))
        _('  info: Control and status register for BG{}.'.format(bg))
        _('  bits: ')
        _('    - {b: 0, name: en, access: rw, info: "If not enabled, will continuously output transparent pixels to blender", concat: bg_en}')
        _('    - {b: [3, 1], name: pixmode, access: rw, concat: bg_pixmode}')
        _('    - {b: 4, name: transparency, access: rw, concat: bg_transparency}')
        _('    - {b: 5, name: tilesize, access: rw, info: "0 -> 8 px tiles. 1 -> 16 px tiles.", concat: bg_tilesize}')
        _('    - {b: [9, 6], name: pfwidth, access: rw, info: "Playfield width is 2 ** (PFWIDTH + 1) pixels.", concat: bg_pfwidth}')
        _('    - {b: [13, 10], name: pfheight, access: rw, info: "Playfield height is 2 ** (PFHEIGHT + 1) pixels.", concat: bg_pfheight}')
        _('    - {b: [19, 16], name: paloffs, access: rw, info: "Offset ORed into upper 4 bits of palette index in paletted pixel modes.", concat: bg_paloffs}')
        _('    - {b: 31, name: flush, access: sc, info: "flush background hardware and re-register all config state (temporary, will be automated)", concat: bg_flush}')
        _('- name: bg{}_scroll'.format(bg))
        _('  info: Scroll the screen within the playfield')
        _('  bits:')
        _('    - {b: [16 + W_COORD - 1, 16], name: y, access: rw, concat: bg_scroll_y}')
        _('    - {b: [W_COORD - 1, 0], name: x, access: rw, concat: bg_scroll_x}')
        _('- name: bg{}_tsbase'.format(bg))
        _('  info: Base address for BG{} tileset. Tileset must be naturally aligned.'.format(bg))
        _('  bits:')
        _('    - {b: [31, 8], access: rw, concat: bg_tsbase}')
        _('- name: bg{}_tmbase'.format(bg))
        _('  info: Base address for BG{} tilemap. Tilemap must be naturally aligned.'.format(bg))
        _('  bits:')
        _('    - {b: [31, 8], access: rw, concat: bg_tmbase}')
  - name: lcd_pxfifo
    info: Direct write access to the pixel FIFO. Must only be used when the PPU is idle.
    bits:
      - {b: [15, 0], access: wf}

  - name: lcd_csr
    info: Control and status register for the LCD interface
    bits:
      - {b: 0,        name: pxfifo_empty, access: rov}
      - {b: 1,        name: pxfifo_full,  access: rov}
      - {b: [7, 2],   name: pxfifo_level, access: rov}
      - {b: 8,        name: lcd_cs,       access: rw, rst: 0x1}
      - {b: 9,        name: lcd_dc,       access: rw}
      - {b: 10,       name: tx_busy,      access: rov}
      - {b: [20, 16], name: lcd_shiftcnt, access: rw}

  - name: ints
    info: Status of interrupt sources. Each source is write-1-clear.
    bits:
      - {b: 0, name: vsync, access: rwf}
      - {b: 1, name: hsync, access: rwf}
  - name: inte
    info: Interrupt enable mask
    bits:
      - {b: 0, name: vsync, access: rw}
      - {b: 1, name: hsync, access: rw}

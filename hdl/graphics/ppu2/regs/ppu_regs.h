/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

#ifndef _PPU_REGS_H_
#define _PPU_REGS_H_

// Block name           : ppu
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

#define PPU_CSR_OFFS 0
#define PPU_DISPSIZE_OFFS 4
#define PPU_CPROC_PC_OFFS 8
#define PPU_LCD_PXFIFO_OFFS 12
#define PPU_LCD_CSR_OFFS 16
#define PPU_INTS_OFFS 20
#define PPU_INTE_OFFS 24

/*******************************************************************************
*                                     CSR                                      *
*******************************************************************************/

// PPU control and status register

// Field: CSR_RUN  Access: SC
// Write 1 to start the PPU running. Self-clearing strobe
#define PPU_CSR_RUN_LSB  0
#define PPU_CSR_RUN_BITS 1
#define PPU_CSR_RUN_MASK 0x1
// Field: CSR_RUNNING  Access: ROV
// Reads as 1 if PPU is running, otherwise 0
#define PPU_CSR_RUNNING_LSB  2
#define PPU_CSR_RUNNING_BITS 1
#define PPU_CSR_RUNNING_MASK 0x4
// Field: CSR_HALT_HSYNC  Access: RW
// If 1, the PPU will halt automatically after completing a scanline
#define PPU_CSR_HALT_HSYNC_LSB  3
#define PPU_CSR_HALT_HSYNC_BITS 1
#define PPU_CSR_HALT_HSYNC_MASK 0x8
// Field: CSR_HALT_VSYNC  Access: RW
// If 1, the PPU will halt automatically after completing a frame
#define PPU_CSR_HALT_VSYNC_LSB  4
#define PPU_CSR_HALT_VSYNC_BITS 1
#define PPU_CSR_HALT_VSYNC_MASK 0x10

/*******************************************************************************
*                                   DISPSIZE                                   *
*******************************************************************************/

// Configure display dimensions. Actual width is W + 1, height is H + 1

// Field: DISPSIZE_W  Access: WO
#define PPU_DISPSIZE_W_LSB  0
#define PPU_DISPSIZE_W_BITS 9
#define PPU_DISPSIZE_W_MASK 0x1ff
// Field: DISPSIZE_H  Access: WO
#define PPU_DISPSIZE_H_LSB  16
#define PPU_DISPSIZE_H_BITS 8
#define PPU_DISPSIZE_H_MASK 0xff0000

/*******************************************************************************
*                                   CPROC_PC                                   *
*******************************************************************************/

// Write to command processor program counter. Must only be used when the PPU is
// idle.

// Field: CPROC_PC  Access: WF
#define PPU_CPROC_PC_LSB  0
#define PPU_CPROC_PC_BITS 32
#define PPU_CPROC_PC_MASK 0xffffffff

/*******************************************************************************
*                                  LCD_PXFIFO                                  *
*******************************************************************************/

// Direct write access to the pixel FIFO. Must only be used when the PPU is
// idle.

// Field: LCD_PXFIFO  Access: WF
#define PPU_LCD_PXFIFO_LSB  0
#define PPU_LCD_PXFIFO_BITS 16
#define PPU_LCD_PXFIFO_MASK 0xffff

/*******************************************************************************
*                                   LCD_CSR                                    *
*******************************************************************************/

// Control and status register for the LCD interface

// Field: LCD_CSR_PXFIFO_EMPTY  Access: ROV
#define PPU_LCD_CSR_PXFIFO_EMPTY_LSB  0
#define PPU_LCD_CSR_PXFIFO_EMPTY_BITS 1
#define PPU_LCD_CSR_PXFIFO_EMPTY_MASK 0x1
// Field: LCD_CSR_PXFIFO_FULL  Access: ROV
#define PPU_LCD_CSR_PXFIFO_FULL_LSB  1
#define PPU_LCD_CSR_PXFIFO_FULL_BITS 1
#define PPU_LCD_CSR_PXFIFO_FULL_MASK 0x2
// Field: LCD_CSR_PXFIFO_LEVEL  Access: ROV
#define PPU_LCD_CSR_PXFIFO_LEVEL_LSB  2
#define PPU_LCD_CSR_PXFIFO_LEVEL_BITS 6
#define PPU_LCD_CSR_PXFIFO_LEVEL_MASK 0xfc
// Field: LCD_CSR_LCD_CS  Access: RW
#define PPU_LCD_CSR_LCD_CS_LSB  8
#define PPU_LCD_CSR_LCD_CS_BITS 1
#define PPU_LCD_CSR_LCD_CS_MASK 0x100
// Field: LCD_CSR_LCD_DC  Access: RW
#define PPU_LCD_CSR_LCD_DC_LSB  9
#define PPU_LCD_CSR_LCD_DC_BITS 1
#define PPU_LCD_CSR_LCD_DC_MASK 0x200
// Field: LCD_CSR_TX_BUSY  Access: ROV
#define PPU_LCD_CSR_TX_BUSY_LSB  10
#define PPU_LCD_CSR_TX_BUSY_BITS 1
#define PPU_LCD_CSR_TX_BUSY_MASK 0x400
// Field: LCD_CSR_LCD_SHIFTCNT  Access: RW
// 1 for 16-bit, 0 for 8-bit
#define PPU_LCD_CSR_LCD_SHIFTCNT_LSB  16
#define PPU_LCD_CSR_LCD_SHIFTCNT_BITS 1
#define PPU_LCD_CSR_LCD_SHIFTCNT_MASK 0x10000

/*******************************************************************************
*                                     INTS                                     *
*******************************************************************************/

// Status of interrupt sources. Each source is write-1-clear.

// Field: INTS_VSYNC  Access: W1C
#define PPU_INTS_VSYNC_LSB  0
#define PPU_INTS_VSYNC_BITS 1
#define PPU_INTS_VSYNC_MASK 0x1
// Field: INTS_HSYNC  Access: W1C
#define PPU_INTS_HSYNC_LSB  1
#define PPU_INTS_HSYNC_BITS 1
#define PPU_INTS_HSYNC_MASK 0x2

/*******************************************************************************
*                                     INTE                                     *
*******************************************************************************/

// Interrupt enable mask

// Field: INTE_VSYNC  Access: RW
#define PPU_INTE_VSYNC_LSB  0
#define PPU_INTE_VSYNC_BITS 1
#define PPU_INTE_VSYNC_MASK 0x1
// Field: INTE_HSYNC  Access: RW
#define PPU_INTE_HSYNC_LSB  1
#define PPU_INTE_HSYNC_BITS 1
#define PPU_INTE_HSYNC_MASK 0x2

#endif // _PPU_REGS_H_

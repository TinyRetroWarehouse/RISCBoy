name: ppu
bus: apb
addr: 16
data: 32
params:
  W_SCREEN_COORD_X: 9
  W_SCREEN_COORD_Y: 8
  W_PLAYFIELD_COORD: 10
  N_BACKGROUND: 2
  N_SPRITE: 8
regs:
  - name: csr
    info: PPU control and status register
    bits:
      - {b: 0, name: run, access: sc, info: "Write 1 to start the PPU running. Self-clearing strobe"}
      - {b: 1, name: halt, access: sc, info: "Write 1 to manually halt the PPU. Self-clearing strobe"}
      - {b: 2, name: running, access: rov, info: "Reads as 1 if PPU is running, otherwise 0"}
      - {b: 3, name: halt_hsync, access: rw, info: "If 1, the PPU will halt automatically after completing a scanline"}
      - {b: 4, name: halt_vsync, access: rw, info: "If 1, the PPU will halt automatically after completing a frame"}
      - {b: 8, name: poker_en, access: rw, info: "Enable the Poker. While Poker is running, PPU will not produce pixels unless Poker is in a WAIT state."}
  - name: dispsize
    info: Configure display dimensions. Actual width is W + 1, height is H + 1
    bits:
      - {b: [W_SCREEN_COORD_X - 1, 0],  name: w, access: wo}
      - {b: [16 + W_SCREEN_COORD_Y - 1, 16], name: h, access: wo}
  - name: default_bg_colour
    info: Colour displayed when all blended pixels are transparent, or all sprites/backgrounds are disabled.
    bits:
      - {b: [14, 0], access: wo}
  - name: beam
    info: Scan coordinates of the next pixel to be blended (read-only)
    bits:
      - {b: [W_SCREEN_COORD_X - 1, 0],  name: x, access: rov}
      - {b: [16 + W_SCREEN_COORD_Y - 1, 16], name: y, access: rov}
  - name: poker_pc
    info: Write to Poker program counter
    bits:
      - {b: [31, 0], access: wf}
  - name: poker_scratch
    info: Scratch register -- can be written to by poker and read by processor
    bits:
      - {b: [7, 0], access: rw}
  - generate: |
      for bg in range(N_BACKGROUND):
        _('- name: bg{}_csr'.format(bg))
        _('  wstb: "bg_flush[{}]"'.format(bg))
        _('  info: Control and status register for BG{}.'.format(bg))
        _('  bits: ')
        _('    - {b: 0, name: en, access: wo, info: "If not enabled, will continuously output transparent pixels to blender", concat: bg_en}')
        _('    - {b: [3, 1], name: pixmode, access: wo, concat: bg_pixmode}')
        _('    - {b: 4, name: transparency, access: wo, concat: bg_transparency}')
        _('    - {b: 5, name: tilesize, access: wo, info: "0 -> 8 px tiles. 1 -> 16 px tiles.", concat: bg_tilesize}')
        _('    - {b: [8, 6], name: pfwidth, access: wo, info: "Playfield width is 2 ** (PFWIDTH + 4) pixels.", concat: bg_pfwidth}')
        _('    - {b: [12, 10], name: pfheight, access: wo, info: "Playfield height is 2 ** (PFHEIGHT + 4) pixels.", concat: bg_pfheight}')
        _('    - {b: [19, 16], name: paloffs, access: wo, info: "Offset ORed into upper 4 bits of palette index in paletted pixel modes.", concat: bg_paloffs}')
        _('- name: bg{}_scroll'.format(bg))
        _('  wstb: "bg_flush[{}]"'.format(bg))
        _('  info: Scroll the screen within the playfield')
        _('  bits:')
        _('    - {b: [16 + W_PLAYFIELD_COORD - 1, 16], name: y, access: wo, concat: bg_scroll_y}')
        _('    - {b: [W_PLAYFIELD_COORD - 1, 0], name: x, access: wo, concat: bg_scroll_x}')
        _('- name: bg{}_tsbase'.format(bg))
        _('  wstb: "bg_flush[{}]"'.format(bg))
        _('  info: Base address for BG{} tileset. Tileset must be naturally aligned.'.format(bg))
        _('  bits:')
        _('    - {b: [31, 8], access: wo, concat: bg_tsbase}')
        _('- name: bg{}_tmbase'.format(bg))
        _('  wstb: "bg_flush[{}]"'.format(bg))
        _('  info: Base address for BG{} tilemap. Tilemap must be naturally aligned.'.format(bg))
        _('  bits:')
        _('    - {b: [31, 8], access: wo, concat: bg_tmbase}')
  - name: sp_csr
    info: "Global settings for all sprites"
    wstb: sp_flush_all
    bits:
      - {b: [3, 1], name: pixmode, access: wo}
      - {b: 5, name: tilesize, access: wo, info: "0 -> all sprites are 8x8 px. 1 -> all are 16x16 px."}
  - name: sp_tsbase
    info: "Pointer to tileset used for sprite images. This can be shared with a background, provided the pixel format and tile size are the same. Tileset pointer must be aligned on tileset size, rounded up to power of two, or on a 256 byte boundary -- whichever is larger."
    wstb: sp_flush_all
    bits:
      - {b: [31, 8], access: wo}
  - generate: |
      for sp in range(N_SPRITE):
        _('- name: sp{}'.format(sp))
        _('  info: Control register for sprite {}'.format(sp))
        _('  wstb: "sp_flush[{}]"'.format(sp))
        _('  bits:')
        _('    - {b: [31, 24], name: tile, access: wo, info: "Select tile from sprite tilemap for this sprite", concat: sp_tile}')
        _('    - {b: [23, 20], name: paloffs, access: wo, info: "Offset ORed into bits [7:4] of palette index if SP_CSR_PIXMODE is paletted", concat: sp_paloffs}')
        _('    - {b: [W_SCREEN_COORD_Y - 1 + 10, 10], name: y, access: wo, info: "Y position of sprite. The hardware adjusts this downward by one sprite height, so a value of 0 means fully above screen.", concat: sp_pos_y}')
        _('    - {b: [W_SCREEN_COORD_X - 1, 0], name: x, access: wo, info: "X position of sprite. The hardware adjusts this downward by one sprite width, so a value of 0 means fully off left of screen.", concat: sp_pos_x}')
  - name: lcd_pxfifo
    info: Direct write access to the pixel FIFO. Must only be used when the PPU is idle.
    bits:
      - {b: [15, 0], access: wf}
  - name: lcd_csr
    info: Control and status register for the LCD interface
    bits:
      - {b: 0,        name: pxfifo_empty, access: rov}
      - {b: 1,        name: pxfifo_full,  access: rov}
      - {b: [7, 2],   name: pxfifo_level, access: rov}
      - {b: 8,        name: lcd_cs,       access: rw, rst: 0x1}
      - {b: 9,        name: lcd_dc,       access: rw}
      - {b: 10,       name: tx_busy,      access: rov}
      - {b: 16, name: lcd_shiftcnt,       access: rw, info: "1 for 16-bit, 0 for 8-bit"}
  - name: ints
    info: Status of interrupt sources. Each source is write-1-clear.
    bits:
      - {b: 0, name: vsync, access: rwf}
      - {b: 1, name: hsync, access: rwf}
  - name: inte
    info: Interrupt enable mask
    bits:
      - {b: 0, name: vsync, access: rw}
      - {b: 1, name: hsync, access: rw}

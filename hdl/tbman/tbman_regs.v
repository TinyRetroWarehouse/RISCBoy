// Autogenerated with regblock
// Do not edit manually

module tbman_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	output reg [7:0] print__o,
	output reg print__wen,
	output reg [31:0] exit__o,
	output reg exit__wen
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'h7;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_PRINT = 0;
localparam ADDR_EXIT = 4;
wire print_wen = wen && addr == ADDR_PRINT;
wire print_ren = ren && addr == ADDR_PRINT;
wire exit_wen = wen && addr == ADDR_EXIT;
wire exit_ren = ren && addr == ADDR_EXIT;

wire [7:0] print__rdata;
wire [7:0] print__wdata;
wire [31:0] print_rdata = {24'h0, print__rdata};
assign print__wdata = wdata[7:0];

wire [31:0] exit__rdata;
wire [31:0] exit__wdata;
wire [31:0] exit_rdata = {exit__rdata};
assign exit__wdata = wdata[31:0];

always @ (*) begin
	case (addr)
		ADDR_PRINT: rdata = print_rdata;
		ADDR_EXIT: rdata = exit_rdata;
		default: rdata = 32'h0;
	endcase
	print__wen = print_wen;
	print__o = print__wdata;
	exit__wen = exit_wen;
	exit__o = exit__wdata;
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
	end else begin
	end
end

endmodule


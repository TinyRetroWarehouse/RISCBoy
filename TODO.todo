Processor:
  ☐ Get float printf working @high
    Everything else I try seems to pass!
    There are some questionable things in the code, e.g. performing a 
    sh on some address, and an lw immediately afterward, which
    causes Xs to get written to register file. Definitely needs investigation.
  ☐ Look closely at riscv-formal to see if suitable
  ✔ Factor out decode to separate module @done (18-11-30 08:31)
  ☐ Iterate on decode synths to try and pack gates down
  ☐ Identify other sources of high gate count
    ✔ ALU: shared adder for add sub, and LT/LTU changes this necessitates @done (18-11-30 08:31)
    ☐ Is the jump target adder in X really necessary? For JALR we can use the ALU. For branches it's PC-relative, so could be computed in D (and we are probably already computing this.)
  ☐ Add exceptions
    ☐ CSR for unaligned info?
    ☐ Non-returning hardfault exception for e.g. exception during exception
  ☐ Consider adding debug
  ☐ Consider hardware unaligned load/store support
    (e.g. perform just byte accesses; just has to be better than software).
  ☐ Port more advanced/larger C testcases
  ☐ Investigate negedge read for register file to improve timing
  ☐ Support for M extension, potentially trap for divides
  ☐ Consider a generic extension interface which could also be used by M extension
  ☐ Add CSR support, with parameters to disable. @low
    Low priority. None of our software will care about CSRs,
    except perhaps for some nonstandard exception info.

Graphics:
  ☐ Set target gate count
  ☐ Set target features
  ☐ Consider memory writeback for compositing multiple layers
  ☐ Consider mode7-esque
  ☐ Consider pixel modes

DMA:
  ☐ Spec it!

Other Chip:
  ☐ Proper async SRAM controller
  ☐ Remove wait states from sync SRAM controller
  ☐ Support bursts in AHB-lite fabric
  ☐ More aggressive busfabric verification (UVM? Formal?)
  ☐ Support partial crossbars in ahbl_crossbar
  ☐ GPIO: multiple-pad peripheral inputs
    (not totally critical for this project)
  ☐ SD controller
    Can be a simple SPI, or more sophisticated e.g. some kind of XIP with cache,
    or manual paging into internal buffers which can then be random-accessed,
    or protocol-oriented but with FIFO interface rather than internal buffers
    (i.e. optimised for streaming into main memory)
  ☐ Audio
    Initially, some FIFOs and simple PWM.
    Can then add e.g. interpolator and improved modulation. Not critical.

PCB:
  ✔ FPGA config: check whether it's feasible for ATXMega32a4u to stream from SD card to FPGA slave config port (minimal part count) @done (18-11-23 00:43)
      Details: probably not. USB pins are shared with one of the SPIs,
      so one of the interfaces would be bitbashed. iCE40 configuration guide
      says the cfg slave needs to be clocked at 1...25 MHz "without interruption".
      Decided to use a different micro: SAML22G18A. This has USB, and also has sufficient
      program storage to hold the bitstream.
  ☐ Find example code for SAML22G18A USB-UART bridge
  ☐ Write simple block-oriented SD read/write code for Atmel and expose this over USB
  ☐ Hazard5 bootloader: load 2nd stage from SD card into memory and execute it
  ✔ Initial PCB layout @done (18-11-30 08:32)
  ✔ Final review of schematic + PCB before sending to iTead @done (18-11-30 20:02)
    Found a couple of silkscreen issues, and a keepout issue under the SD card. Fixed and shipped :)

CPU Synth Results:
  This isn't a todo list, it's just for me to start keeping track. Results are cells (LUT4 + DFF + CARRY + BRAM). Number of iCE40 logic cells occupied should be lower due to colocation after place + route.
  - acc080a: 2870 
      Old frontend, as close to working as it got. Note that this checkout needs to be modified to get this result: RESET_REGS needs to be set to 0 on the register file, else it will be synthesised as discrete flops, which ~doubles the size of the processor.
  - 0da3761: 2765
      new frontend, nearly working
  - 4e8c3bb: 2856
      This commit fixed some AHB assumptions wrt the alignment of sub-word data on the databus. Seems to have added some extra muxing, although the difference is larger than I'd expect.
  - a6ed35f: 2676
      Write M result directly to register file; simplify bypass network as a result
  - e7b46aa: 2681
    Some minor fixes following porting some RISC-V compliance tests. These should have been fairly logic-neutral.
  - 9744864: 2678
    At this point, all the RV32IC-relevant compliance tests run, apart from knowingly unsupported i.e. CSR, unaligned load/store, ECALL/EBREAK. Most recent change was correct C.LUI to be sign-extended.
  - 01916d8e: 2483
    Following ALU optimisations and some smaller changes. Also a few percent faster.